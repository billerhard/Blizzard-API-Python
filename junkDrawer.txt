# Whole bunch of stuff that I'm not using right now.

from multiprocessing.pool import ThreadPool
from io import BytesIO

'''
    # Trying to get async threads to grab data all at once
    # latency is the limiting factor, but threads hurt my brain and this
    # only actually does one thread at a time...
        if path_to_image.exists():
        else:
            tpool = ThreadPool(1)
            response = tpool.apply_async(get_image, (mount['icon'],)).get()
            if not path_to_images.exists():
                path_to_images.mkdir()

            if response.status_code == 404:  # No mount image found
                continue  # So skip it.
            else:
                content = response.content
                with open(path_to_image, "wb") as f:
                    images.append(ImageTk.PhotoImage(Image.open(
                        BytesIO(content))))
                    f.write(content)
'''


'''
    # single threaded alternative to the above, both are slow...
    response = get_image(mount['icon']
    if not path_to_images.exists():
        path_to_images.mkdir()
    if response.status_code == 404:
        continue
    else:
        content = response.content
        with open(path_to_image, "wb") as f:
            images.append(ImageTk.PhotoImage(Image.open(BytesIO(content))))
            f.write(content)
'''


'''
    label = []
    for i in range(10):
        new_url = mounturl + data['mounts'][i]['icon'] + '.jpg'
        r = requests.get(new_url)
        img = ImageTk.PhotoImage(Image.open(BytesIO(r.content)))
        label.append(Label(root, image=img))
    root.mainloop()
'''

'''
    for x in data['mounts']:
        label = []
        try:
            new_url = mounturl + x['icon'] + '.jpg'
            r = requests.get(new_url)
            img = ImageTk.PhotoImage(Image.open(BytesIO(r.content)))
            label.append(Label(root, image=img))
            label.pop().pack()
        except OSError:
            print(new_url)
            continue
'''

#   https://us.api.battle.net/wow/mount/ to get
# mount list (takes locale and api key as params)
#  avatar = requests.get(thumbnail_url)
#  profile = requests.get(profile_url)
#  inset = requests.get(inset_url)
#  maini = requests.get((thumbnail_url[:-10] + 'main.jpg'))
#  mount = requests.get()

#   img = ImageTk.PhotoImage(Image.open(BytesIO(avatar.content)))
#  pimg = ImageTk.PhotoImage(Image.open(BytesIO(profile.content)))
#   iimg = ImageTk.PhotoImage(Image.open(BytesIO(inset.content)))
#   mimg = ImageTk.PhotoImage(Image.open(BytesIO(maini.content)))
# mountimg =

#   label2 = Label(root, image=mimg)
#  label2.pack()

'''
    label = Label(root, image=img)
    label.pack()
    label1 = Label(root, image=pimg)
    label1.pack()
'''

    # response = requests.get(build_request(), params=get_params())

    # Hey look, requests does json!
    # print(response.json())

    # We can even get specific things from it!
    #  level = response.json()['level']
    #  name = response.json()['name']
    #  print(str(name) + ", level: " + str(level))

    #  thumbnail_url = "http://render-us.worldofwarcraft.com/character/" + \
    #                 str(response.json()['thumbnail'])
    # profile_url = thumbnail_url[:-10] + 'profilemain.jpg'
    #  inset_url = thumbnail_url[:-10] + 'inset.jpg'

'''        try:
            labels[i].pack(anchor=NW)
        except AttributeError:
            print(images[i])
            continue
'''

# This is where you input the stuff you need for the request - region, realm,
#  character, request type, etc.
# Right now it just finds one particular character.
def build_request():
    # These are the parts needed for a request... of a particular type.
    region = "us"
    realm = "moon-guard"
    character = "nettleberry"
    request_type = "character"

    # build the request
    return "https://" + region + ".api.battle.net/wow/" + request_type \
           + "/" + realm + "/" + character + "?"

# We need the params to feed requests.get. Everything after the '?' in the
# url goes here.
def get_params():
    # Another param will be fields[] which lets you get various character data
    fields = []
    # At this point we just need the API key and locale
    locale = "en_US"
    return {'apikey': get_api_key_from_file(), 'locale': locale,
            'fields': fields}

